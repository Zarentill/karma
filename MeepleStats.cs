using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MeepleStats : MonoBehaviour
{
	//This class should contain all values relating to the Meeple that either won't change, or will not change very frequently.
	//Examples include: the player-seen name of the Meeple, all currently owned Stations, the number of days it has lived, etc.
	//This could contain more information as well, as we decide we need it.

	//The player seen name of a Meeple, such as Ruth or Vincent.
	public string meepleName;

	//The social class of a Meeple. This may need to be changed to a string, if ints are too confusing for us to handle.
	public int meepleClass;

	//The quirk of a Meeple, such as Caffeine Junkie or PennyPincher. I think Meeples should only have 1 quirk for now, but who knows by Stage 3.
	public string meepleQuirk;

	//This is simply a read only value, and has no effect on the actual gameplay.
	public string meepleGender;

	//This will be a list of all the Stations this Meeple currently has ownership of.
	//There might be other / better ways of tracking ownership, just putting this here for now.
	public List<GameObject> meepleStations;

	//This is a simple counter that tracks how long a Meeple has been alive. Might simply be fun to track & have no effect on the actual game.
	public int meepleDaysAlive;

	//This is a reference to the MeepleNameLibrary script found on the Meeple Manager GameObject, so that we can call the GenerateName() method.
	public MeepleNameLibrary nameLibrary;

	//This is a bool used as a safety, to make sure we only call functions on nameLibrary if it exists.
	bool foundLibrary;

	void Awake ()
	{
		//This is a series of safety checks to ensure that both the Meeple Manager GameObject & the MeepleNameLibrary script exists & can be found.
		//If the script is found, we get a reference of it.
		foundLibrary = false;
		meepleName = "none";
		if (GameObject.Find("Meeple Manager") == null)
		{
			print ("Meeple Name Assignment failed! Couldn't find the \"Meeple Manager\" game object. Are you sure you added one to the scene?");
			foundLibrary = false;
		}
		else if (GameObject.Find("Meeple Manager").GetComponent<MeepleNameLibrary>() == null)
		{
			print ("Successfully found the \"Meeple Manager\" game object, but could not find the \"MeepleNameLibrary\" script that needs to be on the \"Meeple Manager\".");
			foundLibrary = false;
		}
		else
		{
			nameLibrary = GameObject.Find("Meeple Manager").GetComponent<MeepleNameLibrary>();
			foundLibrary = true;
		}
	}
	// Use this for initialization
	void Start ()
	{
		//After making sure we have a reference to the script, we call GenerateName() and pass it a reference to this MeepleStats script.
		//It's important to call this from Start() or later, as Awake() is used to actually initialize the list of names on MeepleNameLibrary.
		if (nameLibrary != null && meepleName == "none" && foundLibrary)
		{
			nameLibrary.GenerateName(gameObject.GetComponent<MeepleStats>());
		}
		else if (nameLibrary != null && meepleName !="none")
		{
			print ("Could not assign name to " + gameObject.name + ". It may have already had one.");
		}
		else if (nameLibrary == null && meepleName =="none")
		{
			print (gameObject.name + " could not find the MeepleNameLibrary. No name has been given.");
		}
		else if (nameLibrary == null && meepleName !="none")
		{
			print (gameObject.name + " could not find the MeepleNameLibrary, but should already has a name.");
		}
	}
	
	// Update is called once per frame
	void Update ()
	{

	}

	/// <summary>
	/// Takes a Meeple Name generated by MeepleNameLibrary.GenerateName() and assigns it to the script the AssignName method exists in.
	/// </summary>
	/// <param name="newName">New name.</param>
	public void AssignName (string newName)
	{
			meepleName = newName;
	}

	void OnDestroy ()
	{
		//When the GameObject this script is on (Which should be a Meeple) is destroyed, this line adds the meepleName given to us back to the list for new Meeples to use.
		if (nameLibrary != null)
		{
			nameLibrary.RenewName (meepleName);
		}
	}
}
